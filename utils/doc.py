"""
intervaltree: A mutable, self-balancing interval tree for Python 2 and 3.
Queries may be by point, by range overlap, or by range envelopment.

Documentation utilities

Copyright 2013-2017 Chaim-Leib Halbert

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
from __future__ import absolute_import
import os
from warnings import warn
import re

from . import fs

def get_rst(create_rst=True):
    if os.path.isdir('pyandoc/pandoc') and os.path.islink('pandoc'):
        print("Generating README.rst from README.md and CHANGELOG.md")
        return generate_rst(create_rst).decode('utf-8')
    elif os.path.isfile('README.rst'):
        print("Reading README.rst")
        return fs.read_file('README.rst').decode('utf-8')
    else:
        warn("No README.rst found!")
        print("Reading README.md")
        data = ''.join([
            fs.read_file('README.md'),
            '\n',
            fs.read_file('CHANGELOG.md'),
        ])
        return data.decode('utf-8')


## Convert README to rst for PyPI
def generate_rst(create_rst):
    """Converts Markdown to RST for PyPI"""
    md = fs.read_file("README.md")

    md = pypi_sanitize_markdown(md)
    rst = markdown2rst(md)
    rst = pypi_prepare_rst(rst)

    changes_md = pypi_sanitize_markdown(fs.read_file("CHANGELOG.md"))
    changes_rst = markdown2rst(changes_md)
    rst += "\n".encode('utf-8') + changes_rst

    # Write it
    if create_rst:
        fs.update_file('README.rst', rst)
    else:
        fs.rm_f('README.rst')

    return rst


def markdown2rst(md):
    """Convert markdown to rst format using pandoc. No other processing."""
    # import here, because outside it might not used
    try:
        import pandoc
    except ImportError as e:
        raise
    else:
        pandoc.PANDOC_PATH = 'pandoc'  # until pyandoc gets updated

    converter = pandoc.Document()
    converter.markdown_github = md
    rst = converter.rst

    return rst


## Sanitizers
def pypi_sanitize_markdown(md):
    """Prepare markdown for conversion to PyPI rst"""
    md = chop_markdown_header(md)
    md = remove_markdown_links(md)

    return md


def pypi_prepare_rst(rst):
    """Add a notice that the rst was auto-generated"""
    head = """\
.. This file is automatically generated by setup.py from README.md and CHANGELOG.md.

"""
    rst = head.encode('utf-8') + rst

    return rst


def chop_markdown_header(md):
    """
    Remove empty lines and travis-ci header from markdown string.
    :param md: input markdown string
    :type md: str
    :return: simplified markdown string data
    :rtype: str
    """
    md = md.splitlines()
    while not md[0].strip() or md[0].startswith('[!['.encode('utf-8')):
        md = md[1:]
    md = '\n'.encode('utf-8').join(md)
    return md


def remove_markdown_links(md):
    """PyPI doesn't like links, so we remove them."""
    # named links, e.g. [hello][url to hello] or [hello][]
    md = md.decode('utf-8')

    md = re.sub(
        r'\[((?:[^\]]|\\\])+)\]'    # link text
        r'\[((?:[^\]]|\\\])*)\]',   # link name
        '\\1',
        md
    )

    # url links, e.g. [example.com](http://www.example.com)
    md = re.sub(
        r'\[((?:[^\]]|\\\])+)\]'    # link text
        r'\(((?:[^\]]|\\\])*)\)',   # link url
        '\\1',
        md
    )

    return md.encode('utf-8')
